name: 'Jib Maven build, scan, and push'
description: 'Builds a docker image for maven projects using jib-maven-plugin'
inputs:
  working-directory:
    description: 'The directory containing the top-level pom'
    required: false
    default: '.'
  image:
    description: 'The image label'
    required: true
  github-token:
    description: 'GITHUB_TOKEN secret for the workflow so SonarCloud can get PR information'
    required: true
  sonar-token:
    description: 'SONAR_TOKEN secret to authenticate job with SonarCloud'
    required: true
  sonar-project-key:
    description: 'The Sonar project key'
    required: false

runs:
  using: "composite"
  steps:
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-${{ runner.arch }}-sonar

    - name: Clean up old artifacts from Maven Cache
      uses: ./.github/actions/maven-cache-cleanup-project-artifacts

    - name: Build Image & Scan
      if: ${{ inputs.sonar-project-key != '' }}
      env:
        IMAGE: ${{ inputs.image }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_PROJECT_KEY: ${{ inputs.sonar-project-key }}
      run: |
        BASE_IMAGE=ghcr.io/opennms-cloud/$(cat ../.github/base-image-tag-ref.json | jq -r .image_tag_java)

        mvn -B -Dstyle.color=always \
            -Pcicd,coverage \
            install \
            -Dapplication.docker.image=$IMAGE -Djib.from.image=$BASE_IMAGE \
            sonar:sonar -Dsonar.projectKey=$SONAR_PROJECT_KEY
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Build Image & Scan
      if: ${{ inputs.sonar-project-key == '' }}
      env:
        IMAGE: ${{ inputs.image }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        SONAR_TOKEN: ${{ inputs.sonar-token }}
      run: |
        BASE_IMAGE=ghcr.io/opennms-cloud/$(cat ../.github/base-image-tag-ref.json | jq -r .image_tag_java)

        mvn -B -Dstyle.color=always \
            -Pcicd,coverage \
            install \
            -Dapplication.docker.image=$IMAGE -Djib.from.image=$BASE_IMAGE \
            sonar:sonar
      shell: bash
      working-directory: ${{ inputs.working-directory }}
