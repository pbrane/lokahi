name: release

on:
  push:
    tags:
      - v*
  workflow_call:
    inputs:
      image-tag:
        description: 'Tag for images built by develop workflow'
        required: false
        type: string
      image-registry:
        description: 'Docker image registry for images built by develop workflow'
        required: false
        type: string
      tag:
        description: 'Tag for images published to Docker Hub'
        required: false
        type: string

env:
  IMAGE_TAG: ${{ inputs.image-tag || github.sha }}
  IMAGE_REGISTRY: ${{ inputs.image-registry || 'ghcr.io' }}
  RELEASE_TAG: ${{ inputs.tag || github.ref_name }}

jobs:
  build-all:
    uses: ./.github/workflows/develop.yml
    secrets: inherit
    with:
      image-tag: ${{ inputs.image-tag || github.sha }}
      image-registry: 'ghcr.io'
  minion:
    # This requires a separate step in order to publish multi-arch images. We
    # tried to get this working through Maven, but was not able to get it
    # working.
    needs: [build-all]
    runs-on: ubuntu-latest
    environment: docker-publish-account
    # Environment that contains the required secrets.
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        # Is required to call actions.

      - name: Log in to the Container registry
        # Need to pull images from github container registry first.
        # Need to pull base images eventually.
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Dockerhub
        # Need to log into Dockerhub to push images.
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-${{ runner.arch }}-sonar

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.2

      - name: Cache Maven dependencies
        uses: ./.github/actions/maven-cache
        with:
          cache-key-hash: ${{ hashFiles('minion/**/pom.xml', 'parent-pom/pom.xml', 'shared-lib/**/pom.xml') }}

      - name: Build and install prerequisites
        uses: ./.github/actions/java-install-prereqs


      - name: Build & Push Images
        run: |

          ls -1

          mvn -B -Dstyle.color=always clean install

          ls -1R docker-assembly/

          docker buildx create --use --driver docker-container --name maven

          # Not sure how to push this without build for multi-arch.
          docker buildx build --push \
            --tag opennms/lokahi-minion:latest \
            --tag opennms/lokahi-minion:${{ env.RELEASE_TAG }} \
            --build-arg VERSION=${{ env.RELEASE_TAG }} \
            docker-assembly/target/docker/opennms/lokahi-minion/latest/build/ \
            -f docker-assembly/src/main/docker/app/Dockerfile \
            --platform linux/amd64,linux/arm64,linux/arm/v7

        working-directory: minion
        shell: bash
      
  release:
    needs: [build-all]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [
          'lokahi-alert',
          'lokahi-datachoices',
          'lokahi-events',
          'lokahi-grafana',
          'lokahi-inventory',
          'lokahi-keycloak',
          'lokahi-metrics-processor',
          'lokahi-metrics-threshold-processor',
          'lokahi-minion-gateway',
          'lokahi-minion-certificate-manager',
          'lokahi-minion-certificate-verifier',
          'lokahi-notification',
          'lokahi-rest-server',
          'lokahi-ui',
        ]
    environment: docker-publish-account
    # Environment that contains the required secrets.
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        # Is required to call actions.

      - name: Log in to the Container registry
        # Need to pull images from github container registry first.
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Dockerhub
        # Need to log into Dockerhub to push images.
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Pull images
        run: |

          docker pull ghcr.io/opennms-cloud/${{ matrix.image }}:${{ env.IMAGE_TAG }}

          # Tag and save the image as a file to be published. Both release version and latest.
          docker tag ghcr.io/opennms-cloud/${{ matrix.image }}:${{ env.IMAGE_TAG }} opennms/${{ matrix.image }}:latest
          docker tag ghcr.io/opennms-cloud/${{ matrix.image }}:${{ env.IMAGE_TAG }} opennms/${{ matrix.image }}:${{ env.RELEASE_TAG }}

          docker images

      - name: Publish images
        run: |

          docker images
   
          docker push opennms/${{ matrix.image }}:latest
          docker push opennms/${{ matrix.image }}:${{ env.RELEASE_TAG }}

  notify:
    needs: [release, minion]
    runs-on: ubuntu-latest
    steps:
      - name: Create the Mattermost Init Message
        run: |
          echo "{\"text\":\"Release ${{ env.RELEASE_TAG }} completed.\"}" > mattermost.json

      - name: Post Init Message to Mattermost
        uses: mattermost/action-mattermost-notify@master
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          MATTERMOST_CHANNEL: "horizon-stream-wg"
          MATTERMOST_USERNAME: "github_actions"
          MATTERMOST_ICON: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
