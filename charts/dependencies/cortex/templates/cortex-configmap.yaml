{{ if .Values.cortex.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ .Values.cortex.serviceName }}
  name: cortex-config-map
  namespace: {{ .Release.Namespace }}
data:
  cortex.yml: |
  {{ if .Values.minio.enabled }}
    target: all,alertmanager
    auth_enabled: true
  {{ else }}
    target: all
  {{ end }}

    # Configuration for running Cortex in single-process mode.
    # This should not be used in production.  It is only for getting started
    # and development.
        
    server:
      http_listen_port: {{ .Values.cortex.port }}

      # Configure the server to allow messages up to 100MB.
      grpc_server_max_recv_msg_size: 104857600
      grpc_server_max_send_msg_size: 104857600
      grpc_server_max_concurrent_streams: 1000
    
    distributor:
      shard_by_all_labels: true
      pool:
        health_check_ingesters: true
    
    ingester_client:
      grpc_client_config:
        # Configure the client to allow messages up to 100MB.
        max_recv_msg_size: 104857600
        max_send_msg_size: 104857600
        grpc_compression: gzip

    ingester:
      lifecycler:
        # The address to advertise for this ingester.  Will be autodiscovered by
        # looking up address on eth0 or en0; can be specified if this fails.
        # address: 127.0.0.1
    
        # We want to start immediately and flush on shutdown.
        min_ready_duration: 0s
        final_sleep: 0s
        num_tokens: 512
    
        # Use an in memory ring store, so we don't need to launch a Consul.
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1

    blocks_storage:
  {{ if .Values.minio.enabled }}
      backend: s3
      s3:
          access_key_id: {{ .Values.minio.username }}
          bucket_name: cortex-tsdb
          secret_access_key: {{ .Values.minio.password }}
          endpoint: myminio-hl.default.svc.cluster.local:9000
          insecure: false
          http:
           insecure_skip_verify: true
      bucket_store:
        sync_dir: /tmp/cortex/tsdb-sync
      tsdb:
        dir: /tmp/cortex/tsdb
  {{ else }}  
      backend: filesystem
      filesystem:
        dir: /tmp/cortex/tsdb
  {{ end }}

    compactor:
      data_dir: /tmp/cortex/compactor
      sharding_ring:
        kvstore:
          store: inmemory

    frontend_worker:
      match_max_concurrent: true
    
  {{ if .Values.minio.enabled }}
    alertmanager:
      external_url: /alertmanager
      enable_api: true
      sharding_enabled: true
      sharding_ring:
        replication_factor: 3
        heartbeat_period: 5s
        heartbeat_timeout: 15s
        kvstore:
         store: inmemory

    alertmanager_storage:
      backend: s3
      s3:
        access_key_id: {{ .Values.minio.username }}
        bucket_name: cortex-alertmanager
        secret_access_key: {{ .Values.minio.password }}
        endpoint: myminio-hl.default.svc.cluster.local:9000
        insecure: false
        http:
         insecure_skip_verify: true
  {{ end }}


    ruler_storage:
  {{ if .Values.minio.enabled }}
      backend: s3
      s3:
       access_key_id: {{ .Values.minio.username }}
       bucket_name: cortex-ruler
       secret_access_key: {{ .Values.minio.password }}
       endpoint: myminio-hl.default.svc.cluster.local:9000
       insecure: false
       http:
        insecure_skip_verify: true
  {{ else }}
      backend: local
      local:
        directory: /tmp/cortex/rules
  {{ end }}

    ruler:
      enable_api: true
      alertmanager_url: http://cortex:9000/alertmanager

  {{- if .Values.OpenNMS.global.openTelemetry.otlpTracesEndpoint }}
    tracing:
      type: otel
      otel:
        {{- $url := urlParse .Values.OpenNMS.global.openTelemetry.otlpTracesEndpoint }}
        # this key is misnamed in 1.14 and is corrected in 1.15 in later to otlp_endpoint
        oltp_endpoint: {{ $url.host }}
        sample_ratio: 1
  {{- end }}
{{ end }}
