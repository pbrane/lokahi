apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.OpenNMS.notification.serviceName }}
  labels:
    app: {{ .Values.OpenNMS.notification.serviceName }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.OpenNMS.notification.serviceName }}
  replicas: {{ .Values.OpenNMS.notification.replicas }}
  template:
    metadata:
      labels:
        appdomain: opennms
        app: {{ .Values.OpenNMS.notification.serviceName }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
        # roll the deployment when the Spring boot environment variable configmap changes
        checksum/spring-boot-env-configmap: {{ include (print $.Template.BasePath "/opennms/spring-boot-env-configmap.yaml") . | sha256sum }}
        kubectl.kubernetes.io/default-container: "{{ .Values.OpenNMS.notification.serviceName }}"
    spec:
      {{- if .Values.nodeRestrictions.enabled }}
      nodeSelector:                                                                                    
        {{ .Values.nodeRestrictions.key }}: {{ .Values.nodeRestrictions.value }}                       
      tolerations:
        - effect: "NoSchedule"                                                                         
          key: "{{ .Values.nodeRestrictions.key }}"                                                    
          operator: "Equal"
          value: {{ .Values.nodeRestrictions.value }} 
      affinity: 
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:                                             
          - weight: 1                                                                                  
            preference:                                                                                
              matchExpressions:                                                                        
              - key: "{{ .Values.nodeRestrictions.key }}"                                              
                operator: In
                values:                                                                                
                - {{ .Values.nodeRestrictions.value }}                                                 
      {{- end }}
      volumes:
        - name: spring-boot-app-config-volume
          configMap:
            name: spring-boot-app-config
      {{- if .Values.citus.enabled }}
      initContainers:
        - name: wait-for-db
          image: postgres:16-alpine
          args:
          - /bin/sh
          - -c
          - | 
            set -x;
            while ! psql -U {{ .Values.citus.adminUser }} -h postgres -c 'select 1'; do
              echo "Waiting for DB to be available"
              sleep 10
            done
            echo "Database is available"
      {{- end }}
      containers:
        - name: {{ .Values.OpenNMS.notification.serviceName }}
          image: {{ include "lokahi.image" (dict "Values" .Values "thisService" .Values.OpenNMS.notification) | quote }}
          imagePullPolicy: {{ .Values.OpenNMS.notification.imagePullPolicy }}
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:MaxRAMPercentage=50 -javaagent:agent/opentelemetry-javaagent.jar -agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n,quiet=y"  # FIXME: Permanent debug port, enable only for dev mode
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "{{ .Values.OpenNMS.global.kafkaClient.bootstrapServers }}"
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://{{ .Values.OpenNMS.notification.databaseHost }}:5432/{{ .Values.OpenNMS.notification.databaseName }}?currentSchema={{ .Values.OpenNMS.notification.databaseSchemaName }}"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: notificationUser
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: notificationPwd
            - name: SPRING_MAIL_FROM
              value: "{{ .Values.OpenNMS.notification.mailFrom }}"
            - name: SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE
              value: "{{ .Values.OpenNMS.notification.smtpStartTls }}"
            - name: SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH
              value: "{{ .Values.OpenNMS.notification.smtpAuth }}"
            - name: SPRING_MAIL_USERNAME
              value: "{{ .Values.OpenNMS.notification.smtpUsername }}"
            - name: SPRING_MAIL_PASSWORD
              value: "{{ .Values.OpenNMS.notification.smtpPassword }}"
            - name: HORIZON_EMAIL_RETRY_DELAY
              value: "{{ .Values.OpenNMS.notification.retry.delay }}"
            - name: HORIZON_EMAIL_RETRY_MAXDELAY
              value: "{{ .Values.OpenNMS.notification.retry.maxDelay }}"
            - name: HORIZON_EMAIL_RETRY_MULTIPLIER
              value: "{{ .Values.OpenNMS.notification.retry.multiplier }}"
            - name: HORIZON_EMAIL_RETRY_MAX
              value: "{{ .Values.OpenNMS.notification.retry.max }}"
            - name: LOKAHI_BASEURL_URL
              value: "{{ .Values.OpenNMS.notification.baseUrl.url }}"
            - name: LOKAHI_BASEURL_APPENDTENANTID
              value: "{{ .Values.OpenNMS.notification.baseUrl.appendTenantId }}"
            {{- if .Values.OpenNMS.notification.acsConnectionSecretName }}
            - name: SPRING_MAIL_ACS_CONNECTION_STRING # spring.mail.acs-connection-string
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.OpenNMS.notification.acsConnectionSecretName }}
                  key: connection-string
            {{- else }}
            - name: SPRING_MAIL_HOST
              value: "{{ .Values.OpenNMS.notification.smtpHost }}"
            - name: SPRING_MAIL_PORT
              value: "{{ .Values.OpenNMS.notification.smtpPort }}"
            {{- end }}
            - name: HORIZON_KEYCLOAK_BASE_URL
              value: "http://{{ .Values.keycloak.serviceName }}:{{ .Values.keycloak.port }}{{ .Values.keycloak.path }}/"
            - name: HORIZON_KEYCLOAK_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.keycloak.serviceName }}-initial-admin
                  key: username
            - name: HORIZON_KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.keycloak.serviceName }}-initial-admin
                  key: password
            # Do not put any env variables below this. The lokahi.development.env include should be last
            # in the 'env' section so variables can be overridden with Helm chart values when needed.
            {{- include "lokahi.deployment.env" (dict "Values" .Values "thisService" .Values.OpenNMS.notification) | nindent 12 }}
          envFrom:
          - configMapRef:
              name: spring-boot-env
          {{- include "lokahi.kafkaSecretFrom" .Values.OpenNMS.notification | indent 10 }}
          ports:
            - name: grpc
              containerPort: 6565
            - name: http
              containerPort: 8080
          volumeMounts:
            - name: spring-boot-app-config-volume
              mountPath: "/app/config"
          livenessProbe:
            httpGet:
              path: "/actuator/health/liveness"
              port: http
              scheme: HTTP
            initialDelaySeconds: 20
            timeoutSeconds: 1
            periodSeconds: 2
            successThreshold: 1
            failureThreshold: 150
          readinessProbe:
            httpGet:
              path: "/actuator/health/readiness"
              port: http
              scheme: HTTP
            initialDelaySeconds: 20
            timeoutSeconds: 1
            periodSeconds: 2 
            successThreshold: 1
            failureThreshold: 250
          resources:
            limits:
              cpu: "{{ .Values.OpenNMS.notification.resources.limits.cpu }}"
              memory: "{{ .Values.OpenNMS.notification.resources.limits.memory }}"
            requests:
              cpu: "{{ .Values.OpenNMS.notification.resources.requests.cpu }}"
              memory: "{{ .Values.OpenNMS.notification.resources.requests.memory }}"
      {{- if .Values.OpenNMS.notification.privateRepoEnabled }}
      imagePullSecrets:
        - name: image-credentials
      {{- end }}
