/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2023 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2023 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/
syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

package opennms.events;
option java_multiple_files = true;
option java_package = "org.opennms.horizon.events.proto";

message EventLog {
  string tenant_id = 1;
  repeated Event events = 2;
}

message Event {
  string tenant_id = 1;
  uint64 database_id = 2;
  string uei = 3;
  uint64 node_id = 4;
  string location_id = 5;
  string ip_address = 6;
  uint64 produced_time_ms = 7;
  repeated EventParameter parameters = 8;
  optional EventInfo info = 9;
  string description = 10;
  string log_message = 11;
  string location_name = 12; // prevent need for inter service id lookup
}

message EventInfo {
  optional SnmpInfo snmp = 1;
  // Any other optional event info.
}

message SnmpInfo {
  string id = 1;
  string version = 2;
  uint32 specific = 3;
  uint32 generic = 4;
  string community = 5;
  string trap_oid = 6;
}

message EventParameter {
  string name = 1;
  string value = 2;
  string type = 3;
  string encoding = 4;
}

message EventsSearchBy {
  int64 node_id = 1;
  string searchTerm = 2;
  int32 page_size = 3;
  int32 page = 4;
  string sort_by = 5;
  bool sort_ascending = 6;

}

message EventLogListResponse {
  string tenant_id = 1;
  repeated Event events = 2;
  int32 next_page = 3;
  int32 last_page = 4;
  int64 total_events = 5;

}

service EventService {
  rpc listEvents(google.protobuf.Empty) returns (EventLog) {};
  rpc getEventsByNodeId(google.protobuf.UInt64Value) returns (EventLog) {};
  rpc searchEvents(EventsSearchBy) returns (EventLogListResponse) {};
}
