/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2022 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2022 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/
syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "ipInterface.proto";
import "snmpInterface.proto";
import "azureInterface.proto";
import "tag.proto";
import "activeDiscovery.proto";

package opennms.inventory;
option java_multiple_files = true;
option java_package = "org.opennms.horizon.inventory.dto";

message NodeDTO {
  int64 id = 1;
  string tenant_id = 2;
  string node_label = 3;
  int64 create_time = 4;
  int64 monitoring_location_id = 5;
  repeated opennms.inventory.IpInterfaceDTO ip_interfaces = 6;
  string object_id = 7;
  string system_name = 8;
  string system_descr = 9;
  string system_location = 10;
  string system_contact = 11;
  repeated opennms.inventory.SnmpInterfaceDTO snmp_interfaces = 12;
  string scan_type = 13;
  optional MonitoredState monitored_state = 14;
  repeated opennms.inventory.AzureInterfaceDTO azure_interfaces = 15;
  repeated opennms.inventory.TagDTO tags = 16;
  string location = 17;
  optional string node_alias = 18;
  repeated int64 discovery_ids = 19;
}

message NodeCreateDTO {
  string label = 1;
  string location_id = 2;
  optional string management_ip = 3;
  repeated opennms.inventory.TagCreateDTO tags = 4;
  optional MonitoredState monitored_state = 5; // optional for now - may change
  repeated int64 discovery_ids = 6;
}

message NodeUpdateDTO {
  int64 id = 1;
  string tenant_id = 2;
  optional string node_alias = 3;
  repeated int64 discovery_ids = 4;
}

enum MonitoredState {
  DETECTED = 0;
  UNMONITORED = 1;
  MONITORED = 2;
}

message NodeList {
  repeated NodeDTO nodes = 1;
}

message NodeIdQuery {
  string location_id = 1;
  string ip_address = 2;
}

message MonitoredStateQuery {
  MonitoredState monitored_state = 1;
}

message TagNameQuery {
  repeated string tags = 1;
}

message NodeLabelSearchQuery {
  string search_term = 1;
}

message NodeIdList {
  repeated int64 ids = 1;
}
message MonitoringPolicies {
  repeated int64 ids = 1;
}

message  SearchIpInterfaceQuery{
  int64  node_id = 1;
  string search_term = 2;
}

message SearchBy {
  string search_term = 1;
  int64 node_id = 2;
}
message SnmpInterfacesList {
  repeated opennms.inventory.SnmpInterfaceDTO snmp_interfaces = 1;
}

enum NodeOperation {
  UPDATE_NODE = 0;
  REMOVE_NODE = 1;
}

message NodeOperationProto {
  NodeOperation operation = 1;
  NodeDTO nodeDto = 2;
}


service NodeService {
  rpc createNode(NodeCreateDTO) returns (NodeDTO) {};
  rpc updateNode(NodeUpdateDTO) returns (google.protobuf.Int64Value) {};
  rpc listNodes(google.protobuf.Empty) returns (NodeList) {};
  rpc listNodesByNodeLabel(NodeLabelSearchQuery) returns (NodeList) {};
  rpc listNodesByMonitoredState(MonitoredStateQuery) returns (NodeList) {};
  rpc listNodesByTags(TagNameQuery) returns (NodeList) {};
  rpc getNodeById(google.protobuf.Int64Value) returns (NodeDTO) {};
  rpc getNodeIdFromQuery(NodeIdQuery) returns (google.protobuf.Int64Value) {};
  rpc deleteNode(google.protobuf.Int64Value) returns(google.protobuf.BoolValue) {};
  rpc startNodeScanByIds(NodeIdList) returns(google.protobuf.BoolValue) {};
  rpc getIpInterfaceById(google.protobuf.Int64Value) returns (IpInterfaceDTO) {};
  rpc getIpInterfaceFromQuery(NodeIdQuery) returns (IpInterfaceDTO) {};
  rpc getNodeCount(google.protobuf.Empty) returns (google.protobuf.Int64Value) {};
  rpc searchIpInterfaces(SearchIpInterfaceQuery) returns (IpInterfaceList) {};
  rpc listSnmpInterfaces(SearchBy) returns (SnmpInterfacesList) {};
  rpc getDiscoveriesByNode(google.protobuf.Int64Value) returns (ActiveDiscoveryList) {};
  rpc getMonitoringPoliciesByNode(google.protobuf.Int64Value) returns (MonitoringPolicies) {};
}
