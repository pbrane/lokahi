/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2022 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2022 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/
syntax = "proto3";

import "google/protobuf/any.proto";
import "snmp-api.proto";
import "types.proto";

package opennms.node.scan;
option java_multiple_files = true;
option java_package = "org.opennms.node.scan.contract";

message NodeScanRequest {
  int64 node_id = 1;
  string primary_ip = 2;
  repeated DetectRequest detector = 3;
  repeated opennms.snmp.api.SnmpConfiguration snmp_configs = 4;
}



message DetectRequest {
  string service = 1;
  google.protobuf.Any config = 2;
}

//Scan Results
message NodeInfoResult {
  string object_id = 1;
  string system_name = 2;
  string system_descr = 3;
  string system_location = 4;
  string system_contact = 5;
  int64 system_uptime = 6;
}

//for service detector
message ServiceResult {
  string ip_address = 1;
  string service = 2;
  bool status = 3;
}

message IpInterfaceResult {
  string ip_address = 1;
  string ip_host_name = 2;
  string netmask = 3;
  int32 if_index = 4;
}

message SnmpInterfaceResult {
  string physical_addr = 1;
  int32 if_index = 2;
  string if_descr = 3;
  int32 if_type = 4;
  string if_name = 5;
  int64 if_speed = 6;
  int32 if_admin_status = 7;
  int32 if_operator_status = 8;
  string if_alias = 9;
}

message NodeScanResult {
  int64 node_id = 1;
  NodeInfoResult node_info = 2;
  repeated IpInterfaceResult ip_interfaces = 3;
  repeated SnmpInterfaceResult snmp_interfaces = 4;
  opennms.snmp.api.SnmpConfiguration snmp_config = 5;
  repeated ServiceResult detector_result = 6;
}


